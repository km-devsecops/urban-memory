# This workflow will install Python dependencies, lint and check for syntax errors run with a single version of Python
# After that the workflow will also run all unit tests via pytest with a single version of Python

name: Developer Branches - Build and Unittest

on:
  push:
    branches:
      - main
      - 'release/**'

jobs:
  lint-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r app/requirements.txt
      - name: Install project
        run: |
          pip install -e .
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  static-code-scan:
    needs: [lint-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
          pip install -r app/requirements.txt
#      - name: SonarQube Quality Gate Check
#        # You may pin to the exact commit or the version.
#        # uses: SonarSource/sonarqube-quality-gate-action@15767f0e4eb489cfdd989dc717fa78c038d0de8a
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  oss-scan:
    needs: [lint-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  iac-scan:
    needs: [lint-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  docker-build-scan:
    needs: [static-code-scan, oss-scan, iac-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Build Image
        run: docker build . -t flaskapp:${{ github.sha }}
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.0.7
        with:
          # image reference
          image-ref: flaskapp:${{ github.sha }}
          # exit code when vulnerabilities were found
          exit-code: 1
          format: 'sarif'
          output: 'trivy-results.sarif'
          # severities of vulnerabilities to be displayed
          severity: HIGH,CRITICAL
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
  check-point:
    needs: [docker-build-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  deploy:
    needs: [check-point]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  acceptance-tests:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  dast-scan:
    needs: [acceptance-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
  cleanup:
    needs: [dast-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
